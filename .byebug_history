continue
@contents.first
@contents
continue
@contents
continue
@contents.first
continue
@contents.first
continue
@contents.first
@contents.first.class.table_name
continue
@@chapter.course
@@chapter
@@contents
continue
@@contents
continue
new
AttemptsController::new
Self.new
self.new
index
new
continue
@@chapter
current_chapter
current_chapter(Chapter.find(params[:id]))
Chapter.find(params[:id])
current_chapter
continue
current_user.attempts
continue
question.experience_final( Alternative.find(params[:question][:alternative_attributes].map {|attrs| attrs.last }) )
question = Question.find(params[:question][:alternative_attributes].map {|attrs| attrs.first }
continue
params[:question]
params
continue
params
params[:question]
continue
question.each{|question| question.correct_alternatives}
question
continue
question
continue
attempt_params
alternatives
continue
@@contents
continue
@@contents
continue
puts "tem coisa aqui caralho seu merda" if @@contents.first
puts "ola" if !@@contents.first
puts "ola" if @@contents.first
puts "ola" if @contents.first
if @contents.first
if @contents
!@@contents.first.nil?
@@contents.first.nil?
@@contents.first
clear
@@contents.first
@@contents
@@content
continue
@@contents
continue
 @@contents
continue
params[:question][:alternative_attributes]
params[:question][:alternative_attributes] = nil
params[:question][:alternative_attributes] == nil
e = params[:question]
e = !params[:question][:alternative_attributes].nil?
continue
params[:text][:id]
params[:text]
params
param[:texts][:id]
params
paras[:question]
params[:texts]
params[:texts][:id]
continue
puts "tem coisa" if params[:question][:test]
puts "tem coisa" if params[:question][:alternative_attributes]
t = params[:question][:alternative_attributes].nil?
t
t = params[:question][:alternative_attributes]
params[:question][:alternative_attributes]
params[:question][:alternatives_attribute]
params[:question][:alternatives_attributes]
params
param
continue
params[:question][:alternative_attributes]
continue
params[:text][:id]
continue
params[:texts_id]
params[:id]
params
continue
params
continue
params
continue
@exercises
@text
continue
@text
@exercise
@video
@exercise
@text
continue
@exercise
continue
@exercises
@exercise
continue
@@contents[0][0]
continue
@partial
continue
c
c.values
c.each do |a,b| puts c[:a] end
c.each do |a,b| puts c[:a]end
c.each do |a,b| puts c[:a].position end
c.keys
c = @chapter.all_contents
c = ActiveSupport::OrderedHash.new
c.each do |a,b| puts b[0].position end
c.each do |a,b| puts b[0].description end
c.each do |a,b| puts b[:description].id end
c.each do |a,b| puts b[description].id end
c.each do |a,b| puts b[0].id end
c.each do |a,b| puts b[0] end
c.each do |a,b| puts b[0][0] end
c.each do |a,b| puts b[0] end
c.each do |a,b| puts b end
c.each do |a,b| puts a[0] end
c.each do |a,b| puts a[:b] end
c.each do |a,b| puts c end
c.each do |a,b| puts c[:b] end
c.each do |a,b| c[:b] end
c[:texts]
c = @chapter.all_contents
@chapter.all_contents[:exercises][0]
@chapter.all_contents[:exercises]
@chapter.all_contents
@chapter.all_contents[:exercise]
continue
@chapter.all_contents[:exercise]
@chapter.all_contents
restart
help
reload!
$contents[:texts][1]
@all[:text]
@all[0][0]
@all[0]
@all
@all[:text]
@all[:texts]
@all = @chapter.all_contents
@chapter.all_contents
$contents[:texts][1]
$contents[:texts][0]
$contents
$contents[0]
$contents
@contents
continue
@contents
continue
attempt_params
params[:question][:alternative_attributes]
params[:questions][:alternatives]
params
params[:questions]
params[:question]
continue
@exercises
continue
@chapter
continue
@chapter
continue
@exercises[0]
@chapter
@exercises
continue
@chapter.videos
@chapter.texts
@chapter.contents
@chapter.exercises
continue
@chapter.exercises
continue
 Course.find(params[:id])
@courses
params
continue
@chapters
params
@chapters
continue
@chapters
params
continue
params
chapter_params
params
continue
params
continue
params
@chapters
continue
params
continue
amount_exercises_final
experience_final
continue
performace.total_experience + points
performace.total_experience
performace.total_experience + points
continue
performace
continue
performace
continue
@attempt
continue
@attempt
continue
points
continue
points
continue
corrects
continue
corrects
continue
corrects
continue
corrects
continue
hash.each {|a| puts a }
hash.each {|a| p uts a }
